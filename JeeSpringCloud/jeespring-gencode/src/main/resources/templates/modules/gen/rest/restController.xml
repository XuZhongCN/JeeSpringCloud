<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/rest/${subModuleName}</filePath>
	<fileName>${ClassName}RestController.java</fileName>
	<content><![CDATA[
/**
 * * Copyright &copy; 2015-2020 <a href="https://gitee.com/JeeHuangBingGui/jeeSpringCloud">JeeSpringCloud</a> All rights reserved..
 */
package ${packageName}.${moduleName}.rest<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.jeespring.common.utils.DateUtils;
import com.jeespring.common.config.Global;
import com.jeespring.common.persistence.Page;
import com.jeespring.common.web.AbstractBaseController;
import com.jeespring.common.utils.StringUtils;
import com.jeespring.common.utils.excel.ExportExcel;
import com.jeespring.common.utils.excel.ImportExcel;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.I${ClassName}Service;
import org.springframework.web.bind.annotation.RestController;
import com.jeespring.common.web.Result;
import com.jeespring.common.web.ResultFactory;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@RequestMapping(value = "/rest/${urlPrefix}")
@Api(value="${functionNameSimple}接口", description="${functionNameSimple}接口")
public class ${ClassName}RestController extends AbstractBaseController {

	//调用dubbo服务器是，要去Reference注解,注解Autowired
	//@Reference(version = "1.0.0")
	@Autowired
	private I${ClassName}Service ${className}Service;

	/**
	 * ${functionNameSimple}信息
	 */
	@RequestMapping(value = {"get"},method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="${functionNameSimple}信息(Content-Type为text/html)", notes="${functionNameSimple}信息(Content-Type为text/html)")
	@ApiImplicitParam(name = "id", value = "${functionNameSimple}id", required = false, dataType = "String",paramType="query")
	public Result getRequestParam(@RequestParam(required=false) String id) {
		return get(id);
	}

	@RequestMapping(value = {"get/json"},method ={RequestMethod.POST})
	@ApiOperation(value="${functionNameSimple}信息(Content-Type为application/json)", notes="${functionNameSimple}信息(Content-Type为application/json)")
	@ApiImplicitParam(name = "id", value = "${functionNameSimple}id", required = false, dataType = "String",paramType="body")
	public Result getRequestBody(@RequestBody(required=false) String id) {
		return get(id);
	}

	private Result get(String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.getCache(id);
			//entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		Result result = ResultFactory.getSuccessResult();
		result.setResultObject(entity);
		return result;
	}

	/**
	 * ${functionNameSimple}列表(不包含页信息)
	 */
	//RequiresPermissions("${permissionPrefix}:findList")
	@RequestMapping(value = {"findList"},method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="${functionNameSimple}列表(不包含页信息)(Content-Type为text/html)", notes="${functionNameSimple}列表(不包含页信息)(Content-Type为text/html)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="query")
	public Result findListRequestParam(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		return findList( ${className},model);
	}

	@RequestMapping(value = {"findList/json"},method ={RequestMethod.POST})
	@ApiOperation(value="${functionNameSimple}列表(不包含页信息)(Content-Type为application/json)", notes="${functionNameSimple}列表(不包含页信息)(Content-Type为application/json)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="body")
	public Result findListRequestBody(@RequestBody ${ClassName} ${className}, Model model) {
		return findList( ${className},model);
	}

	private Result findList(${ClassName} ${className}, Model model) {
		List<${ClassName}> list = ${className}Service.findListCache(${className});
		//List<${ClassName}> list = ${className}Service.findList(${className});
		Result result = ResultFactory.getSuccessResult();
		result.setResultObject(list);
		return result;
	}

	/**
	 * ${functionNameSimple}列表(包含页信息)
	 */
	//RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = {"list"},method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="${functionNameSimple}列表(包含页信息)(Content-Type为text/html)", notes="${functionNameSimple}列表(包含页信息)(Content-Type为text/html)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="query")
	public Result listRequestParam(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		return list(${className},model);
	}

	@RequestMapping(value = {"list/json"},method ={RequestMethod.POST})
	@ApiOperation(value="${functionNameSimple}列表(包含页信息)(Content-Type为application/json)", notes="${functionNameSimple}列表(包含页信息)(Content-Type为application/json)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="body")
	public Result listRequestBody(@RequestBody ${ClassName} ${className}, Model model) {
		return list(${className},model);
	}

	private Result list(${ClassName} ${className}, Model model) {
		Page<${ClassName}> page = ${className}Service.findPageCache(new Page<${ClassName}>(${className}.getPageNo(),${className}.getPageSize(),${className}.getOrderBy()), ${className});
		//Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(${className}.getPageNo(),${className}.getPageSize(),${className}.getOrderBy()), ${className});
		Result result = ResultFactory.getSuccessResult();
		result.setResultObject(page);
		return result;
	}

	/**
	 * ${functionNameSimple}获取列表第一条记录
	 */
	//RequiresPermissions("${permissionPrefix}:listFrist")
	@RequestMapping(value = {"listFrist"},method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="${functionNameSimple}获取列表第一条记录(Content-Type为text/html)", notes="${functionNameSimple}获取列表第一条记录(Content-Type为text/html)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="query")
	public Result listFristRequestParam(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		return listFrist(${className},model);
	}

	@RequestMapping(value = {"listFrist/json"},method ={RequestMethod.POST})
	@ApiOperation(value="${functionNameSimple}获取列表第一条记录(Content-Type为application/json)", notes="${functionNameSimple}获取列表第一条记录(Content-Type为application/json)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="body")
	public Result listFristRequestBody(@RequestBody ${ClassName} ${className}, Model model) {
		return listFrist(${className},model);
	}

	private Result listFrist(${ClassName} ${className}, Model model) {
		Page<${ClassName}> page = ${className}Service.findPageCache(new Page<${ClassName}>(${className}.getPageNo(),${className}.getPageSize(),${className}.getOrderBy()), ${className});
		//Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(${className}.getPageNo(),${className}.getPageSize(),${className}.getOrderBy()), ${className});
		Result result = ResultFactory.getSuccessResult();
		if(page.getList().size()>0){
			result.setResultObject(page.getList().get(0));
		}else{
			result=ResultFactory.getErrorResult("没有记录！");
		}
		return result;
	}

	/**
	 * 保存${functionNameSimple}
	 */
	//RequiresPermissions(value={"${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "save",method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="保存${functionNameSimple}(Content-Type为text/html)", notes="保存${functionNameSimple}(Content-Type为text/html)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="query")
	public Result saveRequestParam(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		return save(${className},model,redirectAttributes);
	}

	@RequestMapping(value = "save/json",method ={RequestMethod.POST})
	@ApiOperation(value="保存${functionNameSimple}(Content-Type为application/json)", notes="保存${functionNameSimple}(Content-Type为application/json)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="body")
	public Result saveRequestBody(@RequestBody ${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		return save(${className},model,redirectAttributes);
	}

	private Result save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ${className})){
			Result result = ResultFactory.getErrorResult("数据验证失败");
		}
		${className}Service.save(${className});
		Result result = ResultFactory.getSuccessResult("保存${functionNameSimple}成功");
		return result;
	}

	/**
	 * 删除${functionNameSimple}
	 */
	//RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "delete",method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="删除${functionNameSimple}(Content-Type为text/html)", notes="删除${functionNameSimple}(Content-Type为text/html)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="query")
	public Result deleteRequestParam(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		return delete(${className},redirectAttributes);
	}

	@RequestMapping(value = "delete/json",method ={RequestMethod.POST})
	@ApiOperation(value="删除${functionNameSimple}(Content-Type为application/json)", notes="删除${functionNameSimple}(Content-Type为application/json)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="body")
	public Result deleteRequestBody(@RequestBody ${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		return delete(${className},redirectAttributes);
	}

	private Result delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		Result result = ResultFactory.getSuccessResult("删除${functionNameSimple}成功");
		return result;
	}

	/**
	 * 删除${functionNameSimple}（逻辑删除，更新del_flag字段为1,在表包含字段del_flag时，可以调用此方法，将数据隐藏）
	 */
	@RequestMapping(value = "deleteByLogic",method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="逻辑删除${functionNameSimple}(Content-Type为text/html)", notes="逻辑删除${functionNameSimple}(Content-Type为text/html)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="query")
	public Result deleteByLogicRequestParam(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		return deleteByLogic(${className},redirectAttributes);
	}

	/**
	 * 删除${functionNameSimple}（逻辑删除，更新del_flag字段为1,在表包含字段del_flag时，可以调用此方法，将数据隐藏）
	 */
	@RequestMapping(value = "deleteByLogic/json",method ={RequestMethod.POST})
	@ApiOperation(value="逻辑删除${functionNameSimple}(Content-Type为application/json)", notes="逻辑删除${functionNameSimple}(Content-Type为application/json)")
	@ApiImplicitParam(name = "${className}", value = "${functionNameSimple}", dataType = "${ClassName}",paramType="body")
	public Result deleteByLogicRequestBody(@RequestBody ${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		return deleteByLogic(${className},redirectAttributes);
	}

	private Result deleteByLogic(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.deleteByLogic(${className});
		Result result = ResultFactory.getSuccessResult("删除${functionNameSimple}成功");
		return result;
	}

	/**
	 * 批量删除${functionNameSimple}
	 */
	//RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "deleteAll",method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="批量删除${functionNameSimple}(Content-Type为text/html)", notes="批量删除${functionNameSimple}(Content-Type为text/html)")
	@ApiImplicitParam(name = "ids", value = "${functionNameSimple}ids,用,隔开", required = false, dataType = "String",paramType="query")
	public Result deleteAllRequestParam(String ids, RedirectAttributes redirectAttributes) {
		return deleteAll(ids,redirectAttributes);
	}

	@RequestMapping(value = "deleteAll/json",method ={RequestMethod.POST})
	@ApiOperation(value="批量删除${functionNameSimple}(Content-Type为application/json)", notes="批量删除${functionNameSimple}(Content-Type为application/json)")
	@ApiImplicitParam(name = "ids", value = "${functionNameSimple}ids,用,隔开", required = false, dataType = "String",paramType="body")
	public Result deleteAllRequestBody(@RequestBody String ids, RedirectAttributes redirectAttributes) {
		return deleteAll(ids,redirectAttributes);
	}

	private Result deleteAll(String ids, RedirectAttributes redirectAttributes) {
		String idArray[] =ids.split(",");
		for(String id : idArray){
			${className}Service.delete(${className}Service.get(id));
		}
        Result result = ResultFactory.getSuccessResult("删除${functionNameSimple}成功");
		return result;
	}

	/**
	 * 批量删除${functionNameSimple}（逻辑删除，更新del_flag字段为1,在表包含字段del_flag时，可以调用此方法，将数据隐藏）
	 */
	@RequestMapping(value = "deleteAllByLogic",method ={RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value="逻辑批量删除${functionNameSimple}(Content-Type为text/html)", notes="逻辑批量删除${functionNameSimple}(Content-Type为text/html)")
	@ApiImplicitParam(name = "ids", value = "${functionNameSimple}ids,用,隔开", required = false, dataType = "String",paramType="query")
	public Result deleteAllByLogicRequestParam(String ids, RedirectAttributes redirectAttributes) {
		return deleteAllByLogic(ids,redirectAttributes);
	}

	/**
	 * 批量删除${functionNameSimple}（逻辑删除，更新del_flag字段为1,在表包含字段del_flag时，可以调用此方法，将数据隐藏）
	 */
	@RequestMapping(value = "deleteAllByLogic/json",method ={RequestMethod.POST})
	@ApiOperation(value="逻辑批量删除${functionNameSimple}(Content-Type为application/json)", notes="逻辑批量删除${functionNameSimple}(Content-Type为application/json)")
	@ApiImplicitParam(name = "ids", value = "${functionNameSimple}ids,用,隔开", required = false, dataType = "String",paramType="body")
	public Result deleteAllByLogicRequestBody(@RequestBody String ids, RedirectAttributes redirectAttributes) {
		return deleteAllByLogic(ids,redirectAttributes);
	}

	private Result deleteAllByLogic(String ids, RedirectAttributes redirectAttributes) {
		String idArray[] =ids.split(",");
		for(String id : idArray){
			${className}Service.deleteByLogic(${className}Service.get(id));
		}
        Result result = ResultFactory.getSuccessResult("删除${functionNameSimple}成功");
		return result;
	}

}]]>
	</content>
</template>