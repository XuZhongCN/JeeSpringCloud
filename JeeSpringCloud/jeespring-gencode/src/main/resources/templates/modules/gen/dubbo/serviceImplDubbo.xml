<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>serviceDubboImpl</name>
	<filePath>src/main/java/${packageName}/../rtd/service/${moduleName}/${subModuleName}</filePath>
	<fileName>${ClassName}ServiceDubboImpl.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/HuangBingGui/jeespring">JeeSpring</a> All rights reserved.
 */
package ${packageName}.rtd.service.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;

import com.alibaba.dubbo.config.annotation.Service;
import com.alibaba.dubbo.rpc.protocol.rest.support.ContentType;
import com.jeespring.common.persistence.Page;
import org.springframework.beans.factory.annotation.Autowired;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.BeanParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Service
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service(protocol = {"rest", "dubbo"}, group = "annotationConfig", validation = "true")
@Path("${className}")
@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML,MediaType.APPLICATION_FORM_URLENCODED})
@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})
public class ${ClassName}ServiceDubboImpl implements ${ClassName}ServiceDubbo {

	@Autowired
	private ${ClassName}Service ${className}Service;

	@GET
	@POST
	@Path("get")
	public ${ClassName} get(@BeanParam  ${ClassName} ${className},@Context HttpServletRequest request,@Context HttpServletResponse response) {
		//return ${className}Service.get(${className});
		return ${className}Service.get(${className}.getId());
	}

	@GET
	@POST
	@Path("list")
	public List<${ClassName}> list(@BeanParam  ${ClassName} ${className},@Context HttpServletRequest request,@Context HttpServletResponse response) {
		return ${className}Service.findList(${className});
	}

	@GET
	@POST
	@Path("findPage")
	public Page<${ClassName}> findPage(@BeanParam  ${ClassName} ${className},@Context HttpServletRequest request,@Context HttpServletResponse response) {
		return ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className});
	}

	@GET
	@POST
	@Path("save")
	public void save(@BeanParam  ${ClassName} ${className},@Context HttpServletRequest request,@Context HttpServletResponse response) {
		${className}Service.save(${className});
	}

	@GET
	@POST
	@Path("delete")
	public void delete(@BeanParam  ${ClassName} ${className},@Context HttpServletRequest request,@Context HttpServletResponse response) {
		${className}Service.delete(${className});
	}
	
}]]>
	</content>
</template>